}
}', .open = '"{', .close = '}"')
return(query)
}
#Test
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue('{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}', .open = '"{', .close = '}"')
return(query)
}
#Test
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue::glue('{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}', .open = '"{', .close = '}"')
return(query)
}
#Test
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- sprintf('{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}', id, from, to)
return(query)
}
#Test
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- sprintf('{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}', id, from, to)
return(query)
}
#Test
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
source("gql-queries/vol_qry.r")
transform_volumes <- function(json_data) {
# Assuming json_data is a list parsed from JSON.
# If it's raw JSON string, uncomment below line.
# data <- fromJSON(json_data, flatten = TRUE)
# If `json_data` is already a parsed list, adjust accordingly:
data <- json_data
# Convert nested list to a dataframe
df <- data$trafficData$volume$byHour$edges %>%
map_df(~.x$node) %>%
unnest(cols = c(total)) %>%
unnest(cols = c(total$volumeNumbers))
# Convert columns to appropriate types, if necessary
df$from <- as.POSIXct(df$from, format="%Y-%m-%dT%H:%M:%SZ", tz="UTC")
df$to <- as.POSIXct(df$to, format="%Y-%m-%dT%H:%M:%SZ", tz="UTC")
df$volume <- as.numeric(df$total$volumeNumbers$volume)
return(df)
}
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
transform_volumes <- function(json_data) {
# Extract data into a data frame
try({
volumes <- json_data$trafficData$volume$byHour$edges
df <- map_df(volumes, function(x) {
data.frame(
from = x$node$from,
to = x$node$to,
volume = x$node$total$volumeNumbers$volume,
stringsAsFactors = FALSE
)
})
# Convert time variables to datetime
df$from <- lubridate::as_datetime(df$from)
df$to <- lubridate::as_datetime(df$to)
return(df)
}, silent = TRUE)
}
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - lubridate::days(7)) %>%
dplyr::sample_n(1) %>%
dplyr::mutate(
volume_data = purrr::map(
.x = id,
.f = ~ GQL(
.query = vol_qry(
id = .x,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
),
.url = configs$vegvesen_url
) %>%
transform_volumes()
)
) %>%
tidyr::unnest(volume_data) %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
labs(title = "Volume of Traffic Over Time",
x = "Time",
y = "Volume",
color = "Traffic Station") +
geom_text(aes(label = name), vjust = -1, check_overlap = TRUE) +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume, color=name)) +  # Added `color=name` here
geom_line() +
labs(title = "Traffic Volume Over Time",
x = "Time",
y = "Volume",
color = "Traffic Station") +  # To label the color legend
theme_classic()
View(stations_metadata_df)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
#Task 6:
selected_station <- stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1)
# Extracting name for future use in ggplot
station_name <- selected_station$name
# Running through GQL and transforming volumes
volume_data <- selected_station %>%
vol_qry(
id = .$id,
from = to_iso8601(.$latestData, -4),
to = to_iso8601(.$latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes()
# Creating the plot
p <- ggplot(volume_data, aes(x = from, y = volume)) +
geom_line() +
labs(title = glue::glue("Traffic Volume for {station_name}"),
x = "Time",
y = "Volume") +
theme_classic()
print(p)
# Creating the plot
p <- ggplot(volume_data, aes(x = from, y = volume)) +
geom_line() +
labs(title = glue::glue("Traffic Volume for {station_name}"),
x = "Time",
y = "Volume") +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
#Task 6:
selected_station %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume, color=name)) +  # assuming `name` is the variable you want to add
geom_line() +
labs(color = "Station Name") + # Label for the legend
theme_classic()
#Task 6:
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) -> selected_station
selected_station %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume, color=name)) +  # assuming `name` is the variable you want to add
geom_line() +
labs(color = "Station Name") + # Label for the legend
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
View(stations_metadata_df)
#Task 6:
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) -> selected_station
selected_station %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume, color=name)) +  # assuming `name` is the variable you want to add
geom_line() +
labs(color = "Station Name") + # Label for the legend
theme_classic()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic() +
labs(color = "Station Name")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
labs(color = "Station Name") +
theme_classic()
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
labs(color = "Station Name") +
theme_classic()
#Tried using the labs function and other variants but there seems to be a problem
# When extracting the "name" variables. Did not find a solution for this.
remove(selected_station)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
labs(color = "Station Name") + #Label for the legend
theme_classic()
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
test_stations_metadata(stations_metadata_df)
